// App.js
import React, { useState, useEffect } from 'react';
import io from 'socket.io-client';

const socket = io('https://pokdeng-online1.onrender.com');

function App() {
  const [roomId, setRoomId] = useState('');
  const [name, setName] = useState('');
  const [balance, setBalance] = useState(100);
  const [cards, setCards] = useState([]);
  const [players, setPlayers] = useState([]);
  const [isDealer, setIsDealer] = useState(false);
  const [hasJoined, setHasJoined] = useState(false);
  const [canShowResult, setCanShowResult] = useState(false);
  const [result, setResult] = useState([]);
  const [summary, setSummary] = useState([]);
  const [myId, setMyId] = useState('');
  const [turnId, setTurnId] = useState('');

  useEffect(() => {
    socket.on('connect', () => setMyId(socket.id));

    socket.on('yourCards', ({ cards }) => setCards(cards));
    socket.on('playersList', list => setPlayers(list));
    socket.on('currentTurn', ({ id }) => setTurnId(id));
    socket.on('enableShowResult', () => setCanShowResult(true));
    socket.on('result', data => {
      setResult(data);
      setCanShowResult(false);
    });
    socket.on('summaryData', data => setSummary(data));
    socket.on('resetGame', () => {
      setResult([]);
      setSummary([]);
    });
    socket.on('lockRoom', () => {
      // ‡∏´‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Ñ
    });
    socket.on('gameEnded', () => {
      socket.emit('requestSummary', { roomId });
    });
  }, [roomId]);

  const handleCreate = () => {
    socket.emit('createRoom', { name, balance }, ({ roomId }) => {
      setRoomId(roomId);
      setHasJoined(true);
      setIsDealer(true);
    });
  };

  const handleJoin = () => {
    socket.emit('joinRoom', { roomId, name, balance }, ({ success }) => {
      if (success) {
        setHasJoined(true);
        setIsDealer(false);
      } else {
        alert('‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    });
  };

  const handleStart = () => {
    socket.emit('startGame', { roomId });
  };

  const handleDraw = () => {
    socket.emit('drawCard', { roomId });
  };

  const handleStay = () => {
    socket.emit('stay', { roomId });
  };

  const handleShowResult = () => {
    socket.emit('showResult', { roomId });
  };

  const handleEndGame = () => {
    socket.emit('endGame', { roomId });
  };

  const handleExit = () => {
    window.location.reload();
  };

  const renderResult = () => (
    result.length > 0 && (
      <div>
        <h3>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</h3>
        <ul>
          {result.map((r, i) => {
            const isDealer = r.outcome === 'dealer';
            const dealerIncome = result.filter(x => x.outcome === 'lose').reduce((sum, x) => sum + (-x.moneyChange), 0);
            const dealerLoss = result.filter(x => x.outcome === 'win').reduce((sum, x) => sum + x.moneyChange, 0);
            const dealerNet = dealerIncome - dealerLoss;

            if (isDealer) {
              return (
                <li key={i}>
                  {r.name}: {r.cards} = {r.sum} ‡πÅ‡∏ï‡πâ‡∏°
                  {r.specialType ? ` (${r.specialType})` : ''}
                  {dealerNet >= 0 ? ` ‚úÖ ‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠ ‡πÑ‡∏î‡πâ ${dealerNet} ‡∏ö‡∏≤‡∏ó` : ` ‚ùå ‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠ ‡πÄ‡∏™‡∏µ‡∏¢ ${-dealerNet} ‡∏ö‡∏≤‡∏ó`}
                </li>
              );
            }

            return (
              <li key={i}>
                {r.name}: {r.cards} = {r.sum} ‡πÅ‡∏ï‡πâ‡∏°
                {r.specialType ? ` (${r.specialType})` : ''}
                {r.outcome === 'win' && ` ‚úÖ ‡∏ä‡∏ô‡∏∞ : ‡πÑ‡∏î‡πâ ${r.moneyChange} ‡∏ö‡∏≤‡∏ó`}
                {r.outcome === 'lose' && ` ‚ùå ‡πÅ‡∏û‡πâ : ‡πÄ‡∏™‡∏µ‡∏¢ ${-r.moneyChange} ‡∏ö‡∏≤‡∏ó`}
                {r.outcome === 'draw' && ` ü§ù ‡πÄ‡∏™‡∏°‡∏≠`}
              </li>
            );
          })}
        </ul>
        {isDealer && <button onClick={handleEndGame}>‡∏à‡∏ö‡πÄ‡∏Å‡∏°</button>}
      </div>
    )
  );

  const renderSummary = () => (
    summary.length > 0 && (
      <div>
        <h3>‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö‡πÄ‡∏Å‡∏°</h3>
        <table border="1" cellPadding="5">
          <thead>
            <tr>
              <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
              <th>‡∏ä‡∏∑‡πà‡∏≠</th>
              <th>‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
              <th>‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô</th>
              <th>‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å</th>
              <th>‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ</th>
            </tr>
          </thead>
          <tbody>
            {summary.map((s, idx) => (
              <tr key={idx}>
                <td>{idx + 1}</td>
                <td>{s.name}</td>
                <td>{s.balance} ‡∏ö‡∏≤‡∏ó</td>
                <td style={{ color: s.net >= 0 ? 'green' : 'red' }}>
                  {s.net >= 0 ? `+${s.net} ‡∏ö‡∏≤‡∏ó` : `${s.net} ‡∏ö‡∏≤‡∏ó`}
                </td>
                <td>
                  {s.income.map((x, i) => (
                    <div key={i}>{x.from} ({x.amount}‡∏ø)</div>
                  ))}
                </td>
                <td>
                  {s.expense.map((x, i) => (
                    <div key={i}>{x.to} ({x.amount}‡∏ø)</div>
                  ))}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        <button onClick={handleExit}>Exit</button>
      </div>
    )
  );

  if (!hasJoined) {
    return (
      <div>
        <h2>‡∏õ‡πä‡∏≠‡∏Å‡πÄ‡∏î‡πâ‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</h2>
        <input placeholder="‡∏ä‡∏∑‡πà‡∏≠" value={name} onChange={e => setName(e.target.value)} />
        <input type="number" placeholder="‡πÄ‡∏á‡∏¥‡∏ô" value={balance} onChange={e => setBalance(Number(e.target.value))} />
        <button onClick={handleCreate}>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á</button>
        <br />
        <input placeholder="Room ID" value={roomId} onChange={e => setRoomId(e.target.value)} />
        <button onClick={handleJoin}>‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á</button>
      </div>
    );
  }

  return (
    <div>
      <h3>‡∏´‡πâ‡∏≠‡∏á: {roomId}</h3>
      <p>‡∏ä‡∏∑‡πà‡∏≠ : {name}</p>
      <p>‡∏ö‡∏ó: {isDealer ? '‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠' : '‡∏Ç‡∏≤‡πÑ‡∏û‡πà'}</p>

      {players.length > 0 && (
        <div>
          <h4>‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ:</h4>
          <ul>
            {players.map((p, i) => <li key={i}>{p}</li>)}
          </ul>
        </div>
      )}

      {cards.length > 0 && (
        <p><b>‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</b> {cards.map(c => `${c.value}${c.suit}`).join(', ')}</p>
      )}

      {isDealer && result.length === 0 && <button onClick={handleStart}>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</button>}

      {!isDealer && myId === turnId && (
        <>
          <button onClick={handleDraw}>‡∏à‡∏±‡πà‡∏ß</button>
          <button onClick={handleStay}>‡πÑ‡∏°‡πà‡∏à‡∏±‡πà‡∏ß</button>
        </>
      )}

      {isDealer && canShowResult && <button onClick={handleShowResult}>‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏û‡πà</button>}

      {renderResult()}
      {renderSummary()}
    </div>
  );
}

export default App;
